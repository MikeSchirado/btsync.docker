#!/bin/bash

ctl () {
    babel-node /app/bin/ctl \
        --pid-path="$BTSYNC_PID_PATH" \
        --config-path="$BTSYNC_CONFIG_PATH" \
        --host-data-path="$HOST_DATA_PATH" \
        --data-path="$DATA_PATH" \
        $@
}

# If we got arguments, I suppose you want to control btsync, as so, lets pass
# them to btsyncctl and exit with its value
if [ "$1" == "ctl" ]; then
    exec ctl ${@:2};
    exit $?
fi

if [ "$1" == "bash" ]; then
    exec bash ${@:2};
    exit $?
fi

if [ "$1" == "bootstrap" ]; then
    ctl init;
    ctl add --secret="$2" "$3";
fi

# Dump variables to help development process
echo
echo "--"
echo
echo "Environment Variables"
echo
echo "DATA:"
echo "- PATH: ${DATA_PATH}"
echo "BTSYNC:"
echo "- ACTIVE: true"
echo "- CONFIG: INTERVAL@${BTSYNC_CONFIG_INTERVAL_CHECK} PATH@${BTSYNC_CONFIG_PATH}"
echo "- USER: ${BTSYNC_UID} ${BTSYNC_USER} ${BTSYNC_HOME}"
echo "- GROUP: ${BTSYNC_GID} ${BTSYNC_GROUP}"
echo "NFS:"
echo "- ACTIVE: $( [ ! -z "${NFS}" ] && echo "true" || "false" )"
echo "- VERSION: ${NFS_VERSION}"
echo
echo "--"
echo

# Activate nfs service in case we should use it
if [ ! -z "${NFS}" ]; then
    rm -f /app/s6/nfs/down
fi

# Configure user
echo "Configuring user: $BTSYNC_USER -> ${BTSYNC_UID}:${BTSYNC_GID}"
addgroup -g "$BTSYNC_GID" "$BTSYNC_GROUP"
adduser -u "$BTSYNC_UID" -G "$BTSYNC_GROUP" -h "$BTSYNC_HOME" -D "$BTSYNC_USER"
mkdir -p "$BTSYNC_HOME"

# Own data folder
chown -R ${BTSYNC_UID}:${BTSYNC_GID} ${DATA_PATH}

# Start supervisor
exec s6-svscan /app/s6
