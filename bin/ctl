#!/usr/local/bin/node --harmony
/* jshint esnext:true, asi:true */

var Yargs = require('yargs')
var path = require('path')
var fs = require('fs')
var os = require('os')
var crypto = require('crypto')
var pkg = require('../package')
var exec = require('sync-exec')
var Debug = require('debug')

var debug = Debug( "btsync:ctl" )

var generate_config = ( args ) => ({
	device_name: args.name,
	listening_port: args.syncPort,
	check_for_updates: args.autoUpdate,
	use_upnp: args.useUpnp,
	download_limit: args.downloadLimit,
	upload_limit: args.uploadLimit,
	storage_path: args.dataPath,
	pid_file: args.pidPath,
	webui: {
		listen: "0.0.0.0:" + args.webPort,
		login: args.webUser,
		password: args.webPass,
		directory_root_policy: "belowroot",
	},
	shared_folders: [],
})

var generate_shared_folder = ( args ) => ({
    secret: args.secret,
    dir: args.folderPath,

    use_relay_server: true,
    use_tracker: true,
    search_lan: true,
    use_sync_trash: true,
})

var read_config = ( args ) => {
    var config

    try {
        var config_string = fs.readFileSync( args.configPath )
        config = JSON.parse( config_string )

		debug( "Reading config from %s", args.configPath )

    } catch ( err ) {}

    return Object.assign(
        {},
        generate_config( args ),
        typeof config === 'object' ? config : {}
    )
}

var save_config = ( config, args ) => {
    var config_string = JSON.stringify( config )
    fs.writeFileSync( args.configPath, config_string )
	debug( "Config saved on %s", args.configPath )
}

var global_options = {
    'name': {
        default: 'btsync-' + crypto
            .createHash( 'md5' )
            .update( Math.random() +'' )
            .digest( 'hex' )
            .substr( 0, 6 ),
        type: 'string'
    },
    'syncPort': {
        default: 55555,
        type: 'integer'
    },
	'webPort': {
        default: 8888,
        type: 'integer'
    },
	'webUser': {
		default: 'admin',
        type: 'string'
    },
	'webPass': {
		default: 'admin',
        type: 'string'
    },
    'autoUpdate': {
		default: false,
        type: 'boolean'
    },
    'useUpnp': {
	default: false,
        type: 'boolean'
    },
    'downloadLimit': {
        default: 0,
        type: 'integer'
    },
    'uploadLimit': {
        default: 0,
        type: 'integer'
    },

    'hostDataPath': {
        default: '/mnt/resource',
        type: 'string'
    },

    'dataPath': {
        default: '/data',
        type: 'string'
    },
    'configPath': {
        default: '/data/btsync.conf',
        type: 'string'
    },
	'pidPath': {
		default: '/var/run/btsync.pid',
		type: 'string'
	}
}

var get_namespace_index = ( namespace, config ) => config
    .shared_folders
    .map((sf) => path.basename(sf.dir))
    .indexOf( namespace )

var get_namespace = ( namespace, config ) => config
    .shared_folders[ get_namespace_index( namespace ) ]

var validate_namespace = ( namespace ) => {
    namespace = ( typeof namespace === 'string' && namespace || '' ).trim()

    if ( ! namespace ) {
        throw new Error( "please give a valid namespace" )
    }

    return namespace
}

var args = Yargs
    .version( pkg.version )
    .usage( 'btsyncctl [options] <commands>' )
    .options( global_options )

    .command( 'init', "creates a config file", ( Yargs ) => {
        var args = Yargs
    		.usage( 'btsyncctl [options] init' )
            .options( global_options )
            .help( 'help' )
            .argv

        var config = read_config( args )

		debug( "Initializing config file" )

        save_config( config, args )
    })

    .command( 'add', "adds a namespace", ( Yargs ) => {
        var args = Yargs
    		.usage( 'btsyncctl [options] add namespace' )
            .options(Object.assign({

                secret: {
                    default: ((str) => str.substr( 0, str.length - 2 ))(
                        exec( 'btsync --generate-secret' ).stdout
                    ),
                    type: 'string'
                }

            }, global_options))

            .demand( 1, 'Please provide a namespace' )
            .help( 'help' )
            .argv

        var config = read_config( args )

        // Validate namespace and folderPath
        args.namespace = validate_namespace( args._[1] || '' )
        args.folderPath = path.join( config.storage_path, args.namespace )

        if ( get_namespace_index( args.namespace, config ) !== -1 ) {
            throw new Error( "namespace already exists" )
        }

        // Creating a new one
        exec( 'mkdir -p "'+ args.folderPath +'"' )

        config.shared_folders.push(
            generate_shared_folder( args )
        )

		debug( "Added %s namespace", args.namespace )

        save_config( config, args )

    })

    .command( 'del', "deletes a namespace", ( Yargs ) => {
        var args = Yargs
    		.usage( 'btsyncctl [options] del namespace' )
            .options(Object.assign({

            }, global_options))

            .demand( 1, 'Please provide a namespace' )
            .help( 'help' )
            .argv

        var config = read_config( args )

        // Validate namespace
        args.namespace = validate_namespace( args._[1] || '' )

        var index = get_namespace_index( args.namespace, config )
        if ( index === -1 ) {
            throw new Error( "namespace doesn't exist" )
        }

        // Remove from configs
        config.shared_folders.splice( index, 1 )

		debug( "Removed %s namespace", args.namespace )

        save_config( config, args )

    })

    .command( 'path', "returns a path", ( Yargs ) => {
        var args = Yargs
    		.usage( 'btsyncctl [options] path namespace' )
            .options(Object.assign({

                scope: {
                    default: 'host',
                    choices: [ 'host', 'container' ]
                }

            }, global_options))

            .demand( 1, 'Please provide a namespace' )
            .help( 'help' )
            .argv


        var config = read_config( args )

        // Validate namespace
        args.namespace = validate_namespace( args._[1] || '' )

        var index = get_namespace_index( args.namespace, config )
        if ( index === -1 ) {
            throw new Error( "namespace doesn't exist" )
        }

        debug(
            path.join(
                (
                    args.scope === 'host' && args.hostDataPath ||
                    args.scope === 'container' && args.dataPath ||
                    '.'
                ),
                args.namespace
            )
        )

    })

    .command( 'has', "exit status based on namespace existance", ( Yargs ) => {
        var args = Yargs
    		.usage( 'btsyncctl [options] has namespace' )
            .options(Object.assign({

            }, global_options))

            .demand( 1, 'Please provide a namespace' )
            .help( 'help' )
            .argv

        var config = read_config( args )

        // Validate namespace
        args.namespace = validate_namespace( args._[1] || '' )

        var index = get_namespace_index( args.namespace, config )
        if ( index === -1 ) {
            process.exit( 1 )
        }

    })

    .command( 'list', "lists namespaces", ( Yargs ) => {
        var args = Yargs
    		.usage( 'btsyncctl [options] list namespace' )
            .options(Object.assign({

            }, global_options))
            .help( 'help' )
            .argv

        var config = read_config( args )

        console.log(
            config
            .shared_folders
            .map((sf) => path.basename(sf.dir))
            .join(' ')
        )
    })

    .demand( 1, 'Please provide a command' )
    .help( 'h' ).alias( 'h', 'help' )
    .argv

process.exit( 0 )
